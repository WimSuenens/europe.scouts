// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// https://next-auth.js.org/v3/adapters/prisma-legacy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// https://next-auth.js.org/v3/adapters/prisma

// model Account {
//   id                 String    @id @default(cuid())
//   userId             String
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   userId       String
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   accounts      Account[]
//   sessions      Session[]
// }

// model VerificationRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }

// https://dev.to/carstenlebek/credentials-authentication-with-database-sessions-using-authjs-sveltekit-and-prisma-2epm

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   // refresh_token      String?  @db.Text
//   // access_token       String?  @db.Text
//   refresh_token      String?  @unique
//   access_token       String?  @unique
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @unique
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String        @id @default(cuid())
  // firstname     String?
  // lastname      String?
  email         String        @unique
  verified      DateTime?
  // image         String?
  // accounts      Account[]
  // sessions      Session[]
  // username      String?    @unique
  password      String?

  person        Person?

  // person        Person?       @relation(fields: [personId], references: [id]) // references `id` of `Person`
  // personId      String?       @unique // relation scalar field (used in the `@relation` attribute above)


}

model Person {
  id            String        @id @default(cuid())
  firstname     String
  lastname      String

  date_of_birth DateTime?
  gender        Gender

  address       Address?      @relation(fields: [addressId], references: [id]) // references `id` of `User`
  addressId     String?       @unique // relation scalar field (used in the `@relation` attribute above)

  user          User?         @relation(fields: [userId], references: [id]) // references `id` of `Person`
  userId        String?       @unique // relation scalar field (used in the `@relation` attribute above)

}

enum Gender {
  MALE
  FEMALE
}

model Address {
  id            String        @id @default(cuid())
  street        String
  zip           String
  community     String
  country       String

  person        Person?         
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }